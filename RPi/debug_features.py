#!/usr/bin/env python3
"""
WAVEGO Feature Debug Tool
========================
Simple tool to test WAVEGO features without full hardware setup.
This script simulates the robot responses and allows testing of web interface.
"""

import os
import sys
import webbrowser
import time
import threading
from http.server import HTTPServer, SimpleHTTPRequestHandler
import json

# Simple HTTP Server for serving test files
class TestHandler(SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=os.path.dirname(os.path.abspath(__file__)), **kwargs)
    
    def end_headers(self):
        # Add CORS headers
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_OPTIONS(self):
        # Handle preflight requests
        self.send_response(200)
        self.end_headers()

def start_test_server(port=8080):
    """Start simple HTTP server for testing"""
    server = HTTPServer(('localhost', port), TestHandler)
    print(f"üåê Test-Server gestartet auf: http://localhost:{port}")
    print(f"üìÑ √ñffne: http://localhost:{port}/feature-test.html")
    server.serve_forever()

def check_features():
    """Check which WAVEGO features are available"""
    print("üîç √úberpr√ºfe WAVEGO Features...")
    
    features = {
        'Flask App': ('app.py', 'Web-Server f√ºr Roboter-Interface'),
        'WebSocket Server': ('webServer.py', 'WebSocket-Server f√ºr Echtzeitkommunikation'),
        'Camera Module': ('camera_opencv.py', 'Kamera und Computer Vision'),
        'Robot Control': ('robot.py', 'Roboter-Steuerung und Bewegung'),
        'BolliOs': ('BollshiiOs.py', 'Gyro-Balance-System'),
        'Object Recognition': ('object_recognition.py', 'Objekterkennung mit OpenCV'),
        'Gesture Recognition': ('gesture_recognition.py', 'Gestenerkennung mit MediaPipe'),
        'Motion Tracking': ('MotionTracker.py', 'Bewegungsverfolgung'),
        'Media Capture': ('media_capture.py', 'Foto- und Video-Aufnahme'),
        'Servo Control': ('servo_stow.py', 'Servo-Positionierung'),
    }
    
    print("\nüìã Feature-Status:")
    print("=" * 50)
    
    for feature_name, (filename, description) in features.items():
        if os.path.exists(filename):
            status = "‚úÖ Verf√ºgbar"
            color = "\033[92m"  # Green
        else:
            status = "‚ùå Nicht gefunden"
            color = "\033[91m"  # Red
        
        print(f"{color}{feature_name:<20} {status}\033[0m")
        print(f"   üìÑ {filename} - {description}")
    
    print("\n" + "=" * 50)

def check_web_interface():
    """Check web interface files"""
    print("\nüåê √úberpr√ºfe Web-Interface...")
    
    web_files = {
        'Main HTML': 'dist/index.html',
        'BolliOs CSS': 'dist/css/bollios-switches.css', 
        'BolliOs JS': 'dist/js/bollios-switches.js',
        'Feature Controls': 'dist/js/feature-controls.js',
        'Keyboard Shortcuts': 'dist/js/keyboard-shortcuts.js',
        'Test Interface': 'feature-test.html'
    }
    
    print("\nüóÇÔ∏è Web-Dateien:")
    print("=" * 40)
    
    for file_name, file_path in web_files.items():
        if os.path.exists(file_path):
            status = "‚úÖ Vorhanden"
            color = "\033[92m"
        else:
            status = "‚ùå Fehlt"
            color = "\033[91m"
        
        print(f"{color}{file_name:<20} {status}\033[0m")
        print(f"   üìÅ {file_path}")

def test_connections():
    """Test various connection possibilities"""
    print("\nüîå Teste Verbindungen...")
    
    # Test ports
    import socket
    
    test_ports = [
        (5000, 'Flask Web Server'),
        (8888, 'WebSocket Server'),
        (8080, 'Test Server')
    ]
    
    print("\nüö™ Port-Status:")
    print("=" * 30)
    
    for port, description in test_ports:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        
        if result == 0:
            status = "üü¢ Offen"
            color = "\033[92m"
        else:
            status = "üî¥ Geschlossen"
            color = "\033[91m"
        
        print(f"{color}Port {port:<4} {status}\033[0m - {description}")

def show_debug_info():
    """Show debug information for troubleshooting"""
    print("\nüêõ Debug-Informationen:")
    print("=" * 40)
    
    # Python version
    print(f"üêç Python Version: {sys.version}")
    
    # Current directory
    print(f"üìÅ Arbeitsverzeichnis: {os.getcwd()}")
    
    # Try importing modules
    modules = [
        'flask', 'websockets', 'cv2', 'numpy', 
        'mediapipe', 'serial', 'asyncio'
    ]
    
    print("\nüì¶ Python Module:")
    for module in modules:
        try:
            __import__(module)
            status = "‚úÖ Installiert"
            color = "\033[92m"
        except ImportError:
            status = "‚ùå Fehlt"
            color = "\033[91m"
        
        print(f"{color}{module:<15} {status}\033[0m")

def main():
    """Main function"""
    print("ü§ñ WAVEGO Feature Debug Tool")
    print("=" * 40)
    
    while True:
        print("\nüìã Optionen:")
        print("1. üîç Features √ºberpr√ºfen")
        print("2. üåê Web-Interface √ºberpr√ºfen") 
        print("3. üîå Verbindungen testen")
        print("4. üêõ Debug-Info anzeigen")
        print("5. üöÄ Test-Server starten")
        print("6. üåç Test-Interface √∂ffnen")
        print("0. ‚ùå Beenden")
        
        try:
            choice = input("\n‚û§ Auswahl (0-6): ").strip()
            
            if choice == '0':
                print("üëã Auf Wiedersehen!")
                break
            elif choice == '1':
                check_features()
            elif choice == '2':
                check_web_interface()
            elif choice == '3':
                test_connections()
            elif choice == '4':
                show_debug_info()
            elif choice == '5':
                print("\nüöÄ Starte Test-Server...")
                print("‚ö†Ô∏è  Dr√ºcke Strg+C zum Beenden")
                try:
                    start_test_server()
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è  Server gestoppt")
            elif choice == '6':
                # Open test interface
                test_url = "file://" + os.path.abspath("feature-test.html")
                print(f"\nüåç √ñffne Test-Interface: {test_url}")
                try:
                    webbrowser.open(test_url)
                    print("‚úÖ Browser ge√∂ffnet")
                except Exception as e:
                    print(f"‚ùå Fehler beim √ñffnen: {e}")
                    print(f"üìã Kopiere diese URL in deinen Browser: {test_url}")
            else:
                print("‚ùå Ung√ºltige Auswahl!")
                
        except KeyboardInterrupt:
            print("\nüëã Auf Wiedersehen!")
            break
        except Exception as e:
            print(f"‚ùå Fehler: {e}")

if __name__ == "__main__":
    main()